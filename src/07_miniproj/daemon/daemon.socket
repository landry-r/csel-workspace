/**
 * Copyright 2015 University of Applied Sciences Western Switzerland / Fribourg
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Project: HEIA-FR / Embedded Systems Laboratory
 *
 * Abstract: Process and daemon samples
 *
 * Purpose: This module implements a simple daemon to be launched
 *          from a /etc/init.d/S??_* script
 *          -> this application requires /opt/daemon as root directory
 *
 * AutÄ¥or:  Daniel Gachet
 * Date:    17.11.2015
 */
#define _XOPEN_SOURCE 600
#define _DEFAULT_SOURCE

#include <fcntl.h>
#include <grp.h>
#include <netinet/in.h>
#include <pwd.h>
#include <signal.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <syslog.h>
#include <unistd.h>
#include <stdatomic.h>

#include "ssd1306.h"

#define S1 "0"
#define S2 "2"
#define S3 "3"

#define GPIO_EXPORT "/sys/class/gpio/export"
#define GPIO_UNEXPORT "/sys/class/gpio/unexport"
#define BUTTON_GPIO_PREFIX "/sys/class/gpio/gpio"

#define UNUSED(x) (void)(x)

static int signal_catched = 0;

//crate atomic int
static atomic_int frequency_ = -1;
static atomic_int mode_ = -1;

//static int frequency_ = -1;
//static int mode_      = -1;

//void set_frequency(int frequency) { frequency_ = frequency; }

//int get_frequency() { return frequency_; }

/*static int* frequency_ = NULL;

void set_frequency(int* frequency) { frequency_ = frequency; }

int* get_frequency() { return frequency_; }*/

static int export_gpio(const char* gpio)
{
    // unexport pin out of sysfs (reinitialization)
    int f = open(GPIO_UNEXPORT, O_WRONLY);
    write(f, gpio, strlen(gpio));
    close(f);

    f = open(GPIO_EXPORT, O_WRONLY);
    if (f == -1) {
        perror("Failed to open GPIO export");
        return -1;
    }

    if (write(f, gpio, strlen(gpio)) == -1) {
        perror("Failed to export GPIO");
        close(f);
        return -1;
    }

    close(f);
    return 0;
}

static int configure_gpio(const char* gpio,
                          const char* direction,
                          const char* edge)
{
    char gpio_direction_path[256];
    snprintf(gpio_direction_path,
             sizeof(gpio_direction_path),
             "%s%s/direction",
             BUTTON_GPIO_PREFIX,
             gpio);

    int f = open(gpio_direction_path, O_WRONLY);
    if (f == -1) {
        perror("Failed to open GPIO direction");
        return -1;
    }

    if (write(f, direction, strlen(direction)) == -1) {
        perror("Failed to configure GPIO direction");
        close(f);
        return -1;
    }

    close(f);

    char gpio_edge_path[256];
    snprintf(gpio_edge_path,
             sizeof(gpio_edge_path),
             "%s%s/edge",
             BUTTON_GPIO_PREFIX,
             gpio);
    f = open(gpio_edge_path, O_WRONLY);
    if (f == -1) {
        perror("Failed to open GPIO edge");
        return -1;
    }

    if (write(f, edge, strlen(edge)) == -1) {
        perror("Failed to configure GPIO edge");
        close(f);
        return -1;
    }

    close(f);
    return 0;
}

static void catch_signal(int signal)
{
    syslog(LOG_INFO, "signal=%d catched\n", signal);
    signal_catched++;
}

int main(int argc, char* argv[])
{
    syslog(LOG_INFO, "daemon started\n");
    UNUSED(argc);
    UNUSED(argv);

    // daemon's steps 1 to 3 skipped

    // 4. capture all required signals
    struct sigaction act = {
        .sa_handler = catch_signal,
    };
    sigaction(SIGHUP, &act, NULL);   //  1 - hangup
    sigaction(SIGINT, &act, NULL);   //  2 - terminal interrupt
    sigaction(SIGQUIT, &act, NULL);  //  3 - terminal quit
    sigaction(SIGABRT, &act, NULL);  //  6 - abort
    sigaction(SIGTERM, &act, NULL);  // 15 - termination
    sigaction(SIGTSTP, &act, NULL);  // 19 - terminal stop signal

    // 5. update file mode creation mask
    umask(0027);

    // 6. change working directory to appropriate place
    if (chdir("/opt") == -1) {
        syslog(LOG_ERR, "ERROR while changing to working directory");
        exit(1);
    }

    // 7. close all open file descriptors
    for (int fd = sysconf(_SC_OPEN_MAX); fd >= 0; fd--) {
        close(fd);
    }

    // 8. redirect stdin, stdout and stderr to /dev/null
    if (open("/dev/null", O_RDWR) != STDIN_FILENO) {
        syslog(LOG_ERR, "ERROR while opening '/dev/null' for stdin");
        exit(1);
    }
    if (dup2(STDIN_FILENO, STDOUT_FILENO) != STDOUT_FILENO) {
        syslog(LOG_ERR, "ERROR while opening '/dev/null' for stdout");
        exit(1);
    }
    if (dup2(STDIN_FILENO, STDERR_FILENO) != STDERR_FILENO) {
        syslog(LOG_ERR, "ERROR while opening '/dev/null' for stderr");
        exit(1);
    }

    ssd1306_init();
    pid_t pid;

    pid = fork();
    if (pid < 0) {
        syslog(LOG_ERR, "ERROR while forking");
        exit(1);
    }

    if (pid == 0) {  // Main process
        // Export button GPIOs
        if (export_gpio(S1) == -1) return -1;
        if (export_gpio(S2) == -1) return -1;
        if (export_gpio(S3) == -1) return -1;

        // Configure button GPIOs
        if (configure_gpio(S1, "in", "rising") == -1) return -1;
        if (configure_gpio(S2, "in", "rising") == -1) return -1;
        if (configure_gpio(S3, "in", "rising") == -1) return -1;

        char buttonStateS1;
        char buttonStateS2;
        char buttonStateS3;

        char frequency[3];
        char mode[3];
        char temperature[3];
        while (1) {
            int s1_file =
                open("/sys/class/gpio/gpio0/value", O_RDONLY);  // Button S1
            int s2_file =
                open("/sys/class/gpio/gpio2/value", O_RDONLY);  // Button S2
            int s3_file =
                open("/sys/class/gpio/gpio3/value", O_RDONLY);  // Button S3

            int fs_file   = open("/sys/class/mini_project/supervisor/frequency",
                               O_RDWR);  // Frequency from supervisor
            int mode_file = open("/sys/class/mini_project/supervisor/mode",
                                 O_RDWR);  // Mode from supervisor
            int temp_file =
                open("/sys/class/mini_project/supervisor/temperature",
                     O_RDONLY);  // Temperature from supervisor

            if (s1_file != -1 && s2_file != -1 && s3_file != -1 &&
                fs_file != -1 && mode_file != -1 && temp_file != -1) {
                /*syslog(LOG_INFO, "Before get_frequency");
                                int* myfreq = get_frequency();
                                syslog(LOG_INFO, "After get_frequency");
                                // syslog(LOG_INFO, "INFO: frequency: %d",
                   myfreq);                     if (myfreq != NULL) {
                                    // write myfreq in frequency file
                                    sprintf(frequency, "%d", *myfreq);
                                    syslog(LOG_INFO, "INFO: frequency: %d",
                   *frequency);                     write(fs_file, frequency,
                   2);                     syslog(LOG_INFO, "Before
                   set_frequency");                     set_frequency(NULL);
                                    syslog(LOG_INFO, "After set_frequency");
                                }*/
                //int myfreq = get_frequency();
                //syslog(LOG_INFO, "INFO: frequency: %d", frequency_);
                if (frequency_ >= 0) {
                    // write myfreq in frequency file
                    sprintf(frequency, "%d", frequency_);
                    syslog(LOG_INFO, "INFO: frequency: %d", frequency);
                    write(fs_file, frequency, 2);
                    frequency_ = -1;
                } else {
                    int ret = read(s1_file, &buttonStateS1, 1);
                    if (ret == -1) {
                        syslog(LOG_ERR, "ERROR while reading button S1");
                        exit(1);
                    }
                    read(s2_file, &buttonStateS2, 1);
                    read(s3_file, &buttonStateS3, 1);

                    read(fs_file, frequency, 2);
                    read(mode_file, mode, 2);
                    read(temp_file, temperature, 2);

                    int old_frequency = atoi(frequency);
                    int old_mode      = atoi(mode);

                    // printf("%c %c
                    // %c\n",buttonStateS1,buttonStateS2,buttonStateS3);
                    // printf("%s %s %s\n",frequency,mode,temperature);

                    if (buttonStateS3 == '1') {  // Button S3 pressed
                        old_mode = (old_mode == 1) ? 0 : 1;
                        // Update the mode with sysfs
                        sprintf(mode, "%d", old_mode);
                        write(mode_file, mode, 1);
                    }
                    if (old_mode == 0) {  // If manual mode is activated
                        if (buttonStateS1 == '1' &&
                            old_frequency < 20) {  // Button S1 pressed
                            old_frequency++;

                            // Update frequency with sysfs
                            sprintf(frequency, "%d", old_frequency);
                            printf("%s\n", frequency);
                            write(fs_file, frequency, 2);
                        } else if (buttonStateS2 == '1' &&
                                   old_frequency > 1) {  // Button S2 pressed
                            old_frequency--;

                            // Update frequency with sysfs
                            sprintf(frequency, "%d", old_frequency);
                            write(fs_file, frequency, 2);
                        }
                    }
                }
            }
            // i2c screen
            ssd1306_set_position(0, 0);
            ssd1306_puts("CSEL1a - SP.07");
            ssd1306_set_position(0, 1);
            ssd1306_puts("  Miniproject");
            ssd1306_set_position(0, 2);
            ssd1306_puts("--------------");
            ssd1306_set_position(0, 3);
            ssd1306_puts("Temp: ");
            ssd1306_puts(temperature);
            ssd1306_puts("'C");
            ssd1306_set_position(0, 4);
            ssd1306_puts("Freq: ");
            ssd1306_puts(frequency);
            ssd1306_puts("Hz ");
            ssd1306_set_position(0, 5);
            ssd1306_puts("Mode: ");
            if (atoi(mode) == 0) {
                ssd1306_puts("Manual");
            } else {
                ssd1306_puts("Auto  ");
            }
            usleep(100000);
            close(s1_file);
            close(s2_file);
            close(s3_file);

            close(fs_file);
            close(mode_file);
            close(temp_file);

            usleep(100000);
        }
    } else if (pid > 0) {  // Socket process
        int socket_server = socket(AF_INET, SOCK_STREAM, 0);
        if (socket_server < 0) {
            perror("Erreur lors de la crÃ©ation du socket");
            exit(EXIT_FAILURE);
        }

        // Configurer l'adresse du serveur
        struct sockaddr_in server_addr;
        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family      = AF_INET;
        server_addr.sin_addr.s_addr = INADDR_ANY;
        server_addr.sin_port        = htons(8080);

        // Lier le socket Ã  l'adresse du serveur
        if (bind(socket_server,
                 (struct sockaddr*)&server_addr,
                 sizeof(server_addr)) < 0) {
            perror(
                "Erreur lors de la liaison du socket Ã  l'adresse du serveur");
            exit(EXIT_FAILURE);
        }

        // Mettre le serveur en Ã©coute pour les connexions entrantes
        if (listen(socket_server, 5) < 0) {
            perror("Erreur lors de la mise en Ã©coute du socket");
            exit(EXIT_FAILURE);
        }

        syslog(LOG_INFO, "Server listening on port 8080");

        while (1) {
            // Accepter une nouvelle connexion entrante
            int socket_client = accept(socket_server, NULL, NULL);
            if (socket_client < 0) {
                perror("Erreur lors de l'acceptation de la connexion entrante");
                exit(EXIT_FAILURE);
            }

            syslog(LOG_INFO, "New client connected");

            // GÃ©rer la communication avec le client
            char buffer[1000];
            int n;

            while (1) {
                // Lire les donnÃ©es envoyÃ©es par le client
                n = read(socket_client, buffer, sizeof(buffer));
                if (n < 0) {
                    perror("Erreur lors de la lecture des donnÃ©es du client");
                    exit(EXIT_FAILURE);
                }
                syslog(LOG_INFO, "Received n: %d", n);
                if (n == 0) {
                    // Fin de la connexion avec le client
                    close(socket_client);
                    break;
                }

                if (n > 0) {
                    char type[24];
                    char value[3];
                    syslog(LOG_INFO, "1", buffer);
                    // separate type and value with :
                    sscanf(buffer, "%[^:]:%s", type, value);
                    if (strcmp(type, "frequency") == 0) {
                        // write value in frequency_
                        //set_frequency(atoi(value));
                        frequency_ = atoi(value);
                        syslog(LOG_INFO, "frequencyyy: %d", frequency_);

                    } else if (strcmp(type, "mode") == 0) {
                        // Update mode with sysfs
                    }

                    // RÃ©pondre au client la valeur du buffer
                    /*n = write(socket_client, buffer, strlen(n));
                    if (n < 0) {
                        perror(
                            "Erreur lors de l'envoi de la rÃ©ponse au client");
                        exit(EXIT_FAILURE);
                    }*/
                }
            }
        }
    }

    syslog(LOG_INFO,
           "daemon stopped. Number of signals catched=%d\n",
           signal_catched);
    closelog();

    return 0;
}